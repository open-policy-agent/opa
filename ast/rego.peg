{
package ast

// currentLocation converts the parser context to a Location object.
func currentLocation(c *current) *Location {
    return NewLocation(c.text, "", c.pos.line, c.pos.col)
}

func ifaceSliceToByteSlice(i interface{}) []byte {
    var buf bytes.Buffer
    for _, x := range i.([]interface{}) {
        buf.Write(x.([]byte))
    }
    return buf.Bytes()
}

func ifacesToBody(i interface{}, a ...interface{}) Body {
    var buf Body
    buf = append(buf, i.(*Expr))
    for _, s := range a {
        expr := s.([]interface{})[3].(*Expr)
        buf = append(buf, expr)
    }
    return buf
}

}

Program <- _ vals:(head:Stmt tail:((ws / ParseError) Stmt)*)? _ EOF {
    var buf []interface{}

    if vals == nil {
        return buf, nil
    }

    ifaceSlice := vals.([]interface{})
    head := ifaceSlice[0]
    buf = append(buf, head)
    for _, tail := range ifaceSlice[1].([]interface{}) {
        stmt := tail.([]interface{})[1]
        buf = append(buf, stmt)
    }

    return buf, nil
}

Stmt <- val:(Package / Import / Rules / Body / Comment / ParseError) {
    return val, nil
}

// Workaround for https://github.com/PuerkitoBio/pigeon/issues/18. Without this,
// the parser returns an error with a bogus position. The workaround is to
// provide a rule that panics on any input. This way, if the rule is ever
// encountered, parsing will stop. The parser will capture a more accurate
// position this way.
ParseError <- . {
    panic(fmt.Sprintf("no match found, unexpected '%s'", c.text))
}

Package <- "package" ws val:(Ref / Var) {
    // All packages are implicitly declared under the default root document.
    path := RefTerm(DefaultRootDocument)
    switch v := val.(*Term).Value.(type) {
    case Ref:
        // Convert head of package Ref to String because it will be prefixed
        // with the root document variable.
        head := v[0]
        head = StringTerm(string(head.Value.(Var)))
        head.Location = v[0].Location
        tail := v[1:]
        if !tail.IsGround() {
            return nil, fmt.Errorf("package name cannot contain variables: %v", v)
        }

        // We do not allow non-string values in package names.
        // Because documents are typically represented as JSON, non-string keys are
        // not allowed for now.
        // TODO(tsandall): consider special syntax for namespacing under arrays.
        for _, p := range tail {
            _, ok := p.Value.(String)
            if !ok {
                return nil, fmt.Errorf("package name cannot contain non-string values: %v", v)
            }
        }
        path.Value = append(path.Value.(Ref), head)
        path.Value = append(path.Value.(Ref), tail...)
    case Var:
        s := StringTerm(string(v))
        s.Location = val.(*Term).Location
        path.Value = append(path.Value.(Ref), s)
    }
    pkg := &Package{Location: currentLocation(c), Path: path.Value.(Ref)}
    return pkg, nil
}

Import <- "import" ws path:(Ref / Var) alias:(ws "as" ws Var)? {
    imp := &Import{}
    imp.Location = currentLocation(c)
    imp.Path = path.(*Term)
    if err := IsValidImportPath(imp.Path.Value); err != nil {
        return nil, err
    }
    if alias == nil {
        return imp, nil
    }
    aliasSlice := alias.([]interface{})
    // Import definition above describes the "alias" slice. We only care about the "Var" element.
    imp.Alias = aliasSlice[3].(*Term).Value.(Var)
    return imp, nil
}

Rules <- DefaultRules / NormalRules

DefaultRules <- "default" ws name:Var _ "=" _ value:Term {

    term := value.(*Term)
    var err error

    vis := NewGenericVisitor(func(x interface{}) bool {
        if err != nil {
            return true
        }
        switch x.(type) {
        case *ArrayComprehension: // skip closures
            return true
        case Ref, Var:
            err = fmt.Errorf("default rule value cannot contain %v", TypeName(x))
            return true
        }
        return false
    })

    Walk(vis, term)

    if err != nil {
        return nil, err
    }

    rule := &Rule{
        Default: true,
        Head: &Head{
            Location: currentLocation(c),
            Name: name.(*Term).Value.(Var),
            Value: value.(*Term),
        },
        Body: NewBody(NewExpr(BooleanTerm(true))),
    }

    rule.Body[0].Location = currentLocation(c)

    return []*Rule{rule}, nil
}

NormalRules <- head:RuleHead _ val:(NonEmptyBraceEnclosedBody (_ NonEmptyBraceEnclosedBody)*) {

    if head == nil {
        return nil, nil
    }

    // Parser is expected to return []Statement. If the author has chained
    // rule bodies together (disjunction) then multiple rules must be returned.
    bodies := []Body{}

    sl := val.([]interface{})
    bodies = append(bodies, sl[0].(Body))
    for _, x := range sl[1].([]interface{}) {
        bodies = append(bodies, x.([]interface{})[1].(Body))
    }

    rules := make([]*Rule, len(bodies))
    for i := range bodies {
        rules[i] = &Rule{
            Head: head.(*Head).Copy(),
            Body: bodies[i],
        }
    }

    return rules, nil
}

RuleHead <- name:Var key:( _ "[" _ Term _ "]" _ )? value:( _ "=" _ Term )? {

    head := &Head{}

    head.Location = currentLocation(c)
    head.Name = name.(*Term).Value.(Var)

    if key != nil {
        keySlice := key.([]interface{})
        // Head definition above describes the "key" slice. We care about the "Term" element.
        head.Key = keySlice[3].(*Term)
    }

    if value != nil {
        valueSlice := value.([]interface{})
        // Head definition above describes the "value" slice. We care about the "Term" element.
        head.Value = valueSlice[len(valueSlice)-1].(*Term)
    }

    if key == nil && value == nil {
        head.Value = BooleanTerm(true)
    }

    if key != nil && value != nil {
        switch head.Key.Value.(type) {
        case Var, String, Ref: // nop
        default:
            return nil, fmt.Errorf("object key must be one of %v, %v, %v not %v", StringTypeName, VarTypeName, RefTypeName, TypeName(head.Key.Value))
        }
    }

    return head, nil
}

Body <- BraceEnclosedBody / NonWhitespaceBody

NonEmptyBraceEnclosedBody <- "{" _ val:WhitespaceBody? _ "}" {
    if val == nil {
        panic("body must be non-empty")
    }
    return val, nil
}

BraceEnclosedBody <- "{" _ val:WhitespaceBody? _ "}" {

    if val == nil {
        body := NewBody(NewExpr(ObjectTerm()))
        body[0].Location = currentLocation(c)
        return body, nil
    }

    return val, nil
}

// When body is enclosed, literals must be separated by newline or semicolon.
// This is used for rules and comprehensions.
WhitespaceBody <- head:Literal tail:([ \t]* ((";" Comment?) / (Comment? [\r\n])) _ Literal)* {
    return ifacesToBody(head, tail.([]interface{})...), nil
}

// When body is not enclosed, literals must be separated by semicolon This is
// used for parsing ad-hoc queries.
NonWhitespaceBody <- head:Literal tail:( _ ";" _ (Literal / ParseError))* {
    return ifacesToBody(head, tail.([]interface{})...), nil
}

Literal <- neg:( "not" ws )? val:Expr with:( ws With (ws With)* )? {
    expr := &Expr{}
    expr.Location = currentLocation(c)
    expr.Negated = neg != nil
    expr.Terms = val

    if with != nil {
        sl := with.([]interface{})
        if head, ok := sl[1].(*With); ok {
            expr.With = []*With{head}
            if sl, ok := sl[2].([]interface{}); ok {
                for i := range sl {
                    if w, ok := sl[i].([]interface{})[1].(*With); ok {
                        expr.With = append(expr.With, w)
                    }
                }
            }
        }
    }

    return expr, nil
}

With <- "with" ws target:Term ws "as" ws value:Term {
    with := &With{}
    with.Location = currentLocation(c)
    with.Target = target.(*Term)
    if err := IsValidImportPath(with.Target.Value); err != nil {
        return nil, err
    }
    with.Value = value.(*Term)
    return with, nil
}

Expr <- (InfixArithExpr / InfixArithExprReverse) / InfixExpr / PrefixExpr / Term

InfixArithExpr <- output:Term _ "=" _ left:Term _ op:ArithInfixOp _ right:Term {
    return []*Term{op.(*Term), left.(*Term), right.(*Term), output.(*Term)}, nil
}

InfixArithExprReverse <- left:Term _ op:ArithInfixOp _ right:Term _ "=" _ output:Term {
    return []*Term{op.(*Term), left.(*Term), right.(*Term), output.(*Term)}, nil
}

ArithInfixOp <- val:("+" / "-" / "*" / "/" / "&" / "|" / "-") {
    op := string(c.text)
    for _, b := range Builtins {
        if string(b.Infix) == op {
            op = string(b.Name)
        }
    }
    operator := VarTerm(op)
    operator.Location = currentLocation(c)
	return operator, nil
}

InfixExpr <- left:Term _ op:InfixOp _ right:Term {
    return []*Term{op.(*Term), left.(*Term), right.(*Term)}, nil
}

InfixOp <- val:("=" / "!=" / "<=" / ">=" / "<" / ">") {
    op := string(c.text)
    for _, b := range Builtins {
        if string(b.Infix) == op {
            op = string(b.Name)
        }
    }
    operator := VarTerm(op)
    operator.Location = currentLocation(c)
	return operator, nil
}

PrefixExpr <- SetEmpty / Builtin

Builtin <- op:Var "(" _ head:Term? tail:( _ "," _ Term )* _  ")" {
    buf := []*Term{op.(*Term)}
    if head == nil {
        return buf, nil
    }
    buf = append(buf, head.(*Term))

    // PrefixExpr above describes the "tail" structure. We only care about the "Term" elements.
    tailSlice := tail.([]interface{})
    for _, v := range tailSlice {
        s := v.([]interface{})
        buf = append(buf, s[len(s) - 1].(*Term))
    }
    return buf, nil
}

Term <- val:( Comprehension / Composite / Scalar / Ref / Var ) {
    return val, nil
}

Comprehension <- ArrayComprehension

ArrayComprehension <- "[" _ term:Term _ "|" _ body:WhitespaceBody _ "]" {
    ac := ArrayComprehensionTerm(term.(*Term), body.(Body))
    ac.Location = currentLocation(c)
    return ac, nil
}

Composite <- Object / Array / Set

Scalar <- Number / String / Bool / Null

Key <- Scalar / Ref / Var

Object <- '{' _ head:(Key _ ':' _ Term)? tail:( _ ',' _ Key _ ':' _ Term )* _ ','? _ '}' {
   obj := ObjectTerm()
   obj.Location = currentLocation(c)

   // Empty object.
   if head == nil {
       return obj, nil
   }

   // Object definition above describes the "head" structure. We only care about the "Key" and "Term" elements.
   headSlice := head.([]interface{})
   obj.Value = append(obj.Value.(Object), Item(headSlice[0].(*Term), headSlice[len(headSlice) - 1].(*Term)))

   // Non-empty object, remaining key/value pairs.
   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       s := v.([]interface{})
       // Object definition above describes the "tail" structure. We only care about the "Key" and "Term" elements.
       obj.Value = append(obj.Value.(Object), Item(s[3].(*Term), s[len(s) - 1].(*Term)))
   }

   return obj, nil
}

Array <- '[' _  head:Term? tail:(_ ',' _ Term)* _ ','? _  ']' {

   arr := ArrayTerm()
   arr.Location = currentLocation(c)

   // Empty array.
   if head == nil {
       return arr, nil
   }

   // Non-empty array, first element.
   arr.Value = append(arr.Value.(Array), head.(*Term))

   // Non-empty array, remaining elements.
   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       s := v.([]interface{})
       // Array definition above describes the "tail" structure. We only care about the "Term" elements.
       arr.Value = append(arr.Value.(Array), s[len(s) - 1].(*Term))
   }

   return arr, nil
}

Set <- SetEmpty / SetNonEmpty

SetEmpty <- "set(" _ ")" {
    set := SetTerm()
    set.Location = currentLocation(c)
    return set, nil
}

SetNonEmpty <- '{' _ head:Term tail:(_ ',' _ Term)* _ ','? _ '}' {
    set := SetTerm()
    set.Location = currentLocation(c)

    val := set.Value.(*Set)
    val.Add(head.(*Term))

    tailSlice := tail.([]interface{})
    for _, v := range tailSlice {
        s := v.([]interface{})
        // SetNonEmpty definition above describes the "tail" structure. We only care about the "Term" elements.
        val.Add(s[len(s) - 1].(*Term))
    }

    return set, nil
}

Ref <- head:Var tail:( RefDot / RefBracket )+ {

   ref := RefTerm(head.(*Term))
   ref.Location = currentLocation(c)

   tailSlice := tail.([]interface{})
   for _, v := range tailSlice {
       ref.Value = append(ref.Value.(Ref), v.(*Term))
   }

   return ref, nil
}

RefDot <- "." val:Var {
    // Convert the Var into a string because 'foo.bar.baz' is equivalent to 'foo["bar"]["baz"]'.
    str := StringTerm(string(val.(*Term).Value.(Var)))
    str.Location = currentLocation(c)
    return str, nil
}

RefBracket <- "[" val:(Ref / Scalar / Var) "]" {
    return val, nil
}

Var <- val:VarChecked {
    return val.([]interface{})[0], nil
}

// VarChecked prevents keywords from being used as variable names.
VarChecked <- val:VarUnchecked !{
    return IsKeyword(string(val.(*Term).Value.(Var))), nil
}

VarUnchecked <- AsciiLetter (AsciiLetter / DecimalDigit)* {
    str := string(c.text)
    variable := VarTerm(str)
    variable.Location = currentLocation(c)
    return variable, nil
}

Number <- '-'? ( Float / Integer ) {
    f, ok := new(big.Float).SetString(string(c.text))
    if !ok {
        // This indicates the grammar is out-of-sync with what the string
        // representation of floating point numbers. This should not be
        // possible.
        panic("illegal value")
    }
    num := NumberTerm(json.Number(f.String()))
    num.Location = currentLocation(c)
    return num, nil
}

Float <- ExponentFloat / PointFloat

ExponentFloat <- ( PointFloat / Integer ) Exponent

PointFloat <- Integer? Fraction

Fraction <- '.' DecimalDigit+

Exponent <- 'e'i [+-]? DecimalDigit+

Integer <- '0' / ( NonZeroDecimalDigit DecimalDigit* )

String <- '"' Char* '"' {
    var v string
    err := json.Unmarshal([]byte(c.text), &v)
    str := StringTerm(v)
    str.Location = currentLocation(c)
    return str, err
}

Bool <- "true" {
    bol := BooleanTerm(true)
    bol.Location = currentLocation(c)
    return bol, nil
} / "false" {
    bol := BooleanTerm(false)
    bol.Location = currentLocation(c)
    return bol, nil
}

Null <- "null" {
    null := NullTerm()
    null.Location = currentLocation(c)
    return null, nil
}

AsciiLetter <- [A-Za-z_]

Char <- ( !EscapedChar . ) / ( '\\' EscapeSequence )

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- [ " \\ / b f n r t ]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

HexDigit <- [0-9a-fA-F]

ws "whitespace" <- [ \t\r\n]+

_ "whitespace" <- ( [ \t\r\n] / Comment )*

Comment <- [ \t]* "#" text:[^\r\n]* {
    comment := NewComment(ifaceSliceToByteSlice(text))
    comment.Location = currentLocation(c)
    return comment, nil
}

EOF <- !.
