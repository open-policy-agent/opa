{
package stateclone

type values []int

func (vals values) Clone() interface{} {
	clone := make(values, 0, len(vals))
	clone = append(clone, vals...)
	return clone
}

}

start = #{ 
	if _, ok := c.state["vals"]; !ok { 
		vals := make(values, 1)
		vals[0] = 10
		c.state["vals"] = vals
	}
	return nil 
} ((x/y/z) ws*)* { 
	return c.state["vals"], nil 
}

x = "ab" c "d"
y = "a" bc "e"
z = "abcf" #{ c.state["vals"] = append(c.state["vals"].(values), 5); return nil}

c = "c" #{ c.state["vals"] = append(c.state["vals"].(values), 3); return nil }
bc = "bc" #{ c.state["vals"] = append(c.state["vals"].(values), 1); return nil}

ws = " " / "\n"
