{
  package emptystate
}

start <- #{ return nil } a b c d e
  {
    return c.state, nil
  }

a <- 'a'
  {
    // action code block forces the clone/restore of state, so p.cur.state === p.emptyState
    return nil, nil
  }

b <- 'b'
  #{
    // set thing in state, emptyState no longer empty
    c.state["thing"] = 1
    return nil
  }

c <- 'c'
  {
    // code block forces clone/restore of state, so p.cur.state !== p.emptyState, but both are now non-empty
    return nil, nil
  }

d <- 'd'
  #{
    // remove the thing from the state, so it is now empty in p.cur.state (but not in p.emptyState)
    delete(c.state, "thing")
    return nil
  }

e <- 'e'
  {
    // code block forces a clone, but c.state is empty so it returns p.emptyState, and then on restore
    // c.state is set to that p.emptyState, which is not empty.
    return nil, nil
  }

