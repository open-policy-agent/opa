{
package main
}

Grammar ← __ initializer:( Initializer __ )? rules:( Rule __ )+ EOF {
    pos := c.astPos()

    // create the grammar, assign its initializer
    g := ast.NewGrammar(pos)
    initSlice := toIfaceSlice(initializer)
    if len(initSlice) > 0 {
        g.Init = initSlice[0].(*ast.CodeBlock)
    }

    rulesSlice := toIfaceSlice(rules)
    g.Rules = make([]*ast.Rule, len(rulesSlice))
    for i, duo := range rulesSlice {
        g.Rules[i] = duo.([]interface{})[0].(*ast.Rule)
    }

    return g, nil
}

Initializer ← code:CodeBlock EOS {
    return code, nil
}

Rule ← name:IdentifierName __ display:( StringLiteral __ )? RuleDefOp __ expr:Expression EOS {
    pos := c.astPos()

    rule := ast.NewRule(pos, name.(*ast.Identifier))
    displaySlice := toIfaceSlice(display)
    if len(displaySlice) > 0 {
        rule.DisplayName = displaySlice[0].(*ast.StringLit)
    }
    rule.Expr = expr.(ast.Expression)

    return rule, nil
}

Expression ← RecoveryExpr

RecoveryExpr ← expr:ChoiceExpr recoverExprs:( __ "//{" __ Labels __ "}" __ ChoiceExpr )* {
    recoverExprSlice := toIfaceSlice(recoverExprs)
    recover := expr.(ast.Expression)
    for _, sl := range recoverExprSlice {
        pos := c.astPos()
        r := ast.NewRecoveryExpr(pos)
        r.Expr = recover
        r.RecoverExpr = sl.([]interface{})[7].(ast.Expression)
        r.Labels = sl.([]interface{})[3].([]ast.FailureLabel)

        recover = r
    }
    return recover, nil
}

Labels ← label:IdentifierName labels:( __ "," __ IdentifierName)* {
    failureLabels := []ast.FailureLabel{ast.FailureLabel(label.(*ast.Identifier).Val)}
    labelSlice := toIfaceSlice(labels)
    for _, fl := range labelSlice {
        failureLabels = append(failureLabels, ast.FailureLabel(fl.([]interface{})[3].(*ast.Identifier).Val))
    }
    return failureLabels, nil
}

ChoiceExpr ← first:ActionExpr rest:( __ "/" __ ActionExpr )* {
    restSlice := toIfaceSlice(rest)
    if len(restSlice) == 0 {
        return first, nil
    }

    pos := c.astPos()
    choice := ast.NewChoiceExpr(pos)
    choice.Alternatives = []ast.Expression{first.(ast.Expression)}
    for _, sl := range restSlice {
        choice.Alternatives = append(choice.Alternatives, sl.([]interface{})[3].(ast.Expression))
    }
    return choice, nil
}

ActionExpr ← expr:SeqExpr code:( __ CodeBlock )? {
    if code == nil {
        return expr, nil
    }

    pos := c.astPos()
    act := ast.NewActionExpr(pos)
    act.Expr = expr.(ast.Expression)
    codeSlice := toIfaceSlice(code)
    act.Code = codeSlice[1].(*ast.CodeBlock)

    return act, nil
}

SeqExpr ← first:LabeledExpr rest:( __ LabeledExpr )* {
    restSlice := toIfaceSlice(rest)
    if len(restSlice) == 0 {
        return first, nil
    }
    seq := ast.NewSeqExpr(c.astPos())
    seq.Exprs = []ast.Expression{first.(ast.Expression)}
    for _, sl := range restSlice {
        seq.Exprs = append(seq.Exprs, sl.([]interface{})[1].(ast.Expression))
    }
    return seq, nil
}

LabeledExpr ← label:Identifier __ ':' __ expr:PrefixedExpr {
    pos := c.astPos()
    lab := ast.NewLabeledExpr(pos)
    lab.Label = label.(*ast.Identifier)
    lab.Expr = expr.(ast.Expression)
    return lab, nil
} / PrefixedExpr / ThrowExpr

PrefixedExpr ← op:PrefixedOp __ expr:SuffixedExpr {
    pos := c.astPos()
    opStr := op.(string)
    if opStr == "&" {
        and := ast.NewAndExpr(pos)
        and.Expr = expr.(ast.Expression)
        return and, nil
    }
    not := ast.NewNotExpr(pos)
    not.Expr = expr.(ast.Expression)
    return not, nil
} / SuffixedExpr

PrefixedOp ← ( '&' / '!' ) {
    return string(c.text), nil
}

SuffixedExpr ← expr:PrimaryExpr __ op:SuffixedOp {
    pos := c.astPos()
    opStr := op.(string)
    switch opStr {
    case "?":
        zero := ast.NewZeroOrOneExpr(pos)
        zero.Expr = expr.(ast.Expression)
        return zero, nil
    case "*":
        zero := ast.NewZeroOrMoreExpr(pos)
        zero.Expr = expr.(ast.Expression)
        return zero, nil
    case "+":
        one := ast.NewOneOrMoreExpr(pos)
        one.Expr = expr.(ast.Expression)
        return one, nil
    default:
        return nil, errors.New("unknown operator: " + opStr)
    }
} / PrimaryExpr 

SuffixedOp ← ( '?' / '*' / '+' ) {
    return string(c.text), nil
}

PrimaryExpr ← LitMatcher / CharClassMatcher / AnyMatcher / RuleRefExpr / SemanticPredExpr / "(" __ expr:Expression __ ")" {
    return expr, nil
}
RuleRefExpr ← name:IdentifierName !( __ ( StringLiteral __ )? RuleDefOp ) {
    ref := ast.NewRuleRefExpr(c.astPos())
    ref.Name = name.(*ast.Identifier)
    return ref, nil
}
SemanticPredExpr ← op:SemanticPredOp __ code:CodeBlock {
    switch op.(string) {
    case "#":
        state := ast.NewStateCodeExpr(c.astPos())
        state.Code = code.(*ast.CodeBlock)
        return state, nil

    case "&":
        and := ast.NewAndCodeExpr(c.astPos())
        and.Code = code.(*ast.CodeBlock)
        return and, nil

    // case "!":
    default:
        not := ast.NewNotCodeExpr(c.astPos())
        not.Code = code.(*ast.CodeBlock)
        return not, nil

    }
}
SemanticPredOp ← ( '#' / '&' / '!' ) {
    return string(c.text), nil
}

RuleDefOp ← '=' / "<-" / '\u2190' / '\u27f5'

SourceChar ← .
Comment ← MultiLineComment / SingleLineComment
MultiLineComment ← "/*" ( !"*/" SourceChar )* "*/"
MultiLineCommentNoLineTerminator ← "/*" ( !( "*/" / EOL ) SourceChar )* "*/"
SingleLineComment ← !("//{") "//" ( !EOL SourceChar )*

Identifier ← ident:IdentifierName {
    astIdent := ast.NewIdentifier(c.astPos(), string(c.text))
    if reservedWords[astIdent.Val] {
        return astIdent, errors.New("identifier is a reserved word")
    }
    return astIdent, nil
}

IdentifierName ← IdentifierStart IdentifierPart* {
    return ast.NewIdentifier(c.astPos(), string(c.text)), nil
}
IdentifierStart ← [\pL_]
IdentifierPart ← IdentifierStart / [\p{Nd}]

LitMatcher ← lit:StringLiteral ignore:"i"? {
    rawStr := lit.(*ast.StringLit).Val
	s, err := strconv.Unquote(rawStr)
    if err != nil {
        // an invalid string literal raises an error in the escape rules,
        // so simply replace the literal with an empty string here to
        // avoid a cascade of errors.
        s = ""
    }
    m := ast.NewLitMatcher(c.astPos(), s)
    m.IgnoreCase = ignore != nil
    return m, nil
}
StringLiteral ← ( '"' DoubleStringChar* '"' / "'" SingleStringChar "'" / '`' RawStringChar* '`' ) {
    return ast.NewStringLit(c.astPos(), string(c.text)), nil
} / ( ( '"' DoubleStringChar* ( EOL / EOF ) ) / ( "'" SingleStringChar? ( EOL / EOF ) ) / '`' RawStringChar* EOF ) {
    return ast.NewStringLit(c.astPos(), "``"), errors.New("string literal not terminated")
}

DoubleStringChar ← !( '"' / "\\" / EOL ) SourceChar / "\\" DoubleStringEscape
SingleStringChar ← !( "'" / "\\" / EOL ) SourceChar / "\\" SingleStringEscape
RawStringChar ← !'`' SourceChar

DoubleStringEscape ← ( '"' / CommonEscapeSequence )
    / ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid escape character")
}
SingleStringEscape ← ( "'" / CommonEscapeSequence )
    / ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid escape character")
}

CommonEscapeSequence ← SingleCharEscape / OctalEscape / HexEscape / LongUnicodeEscape / ShortUnicodeEscape
SingleCharEscape ← 'a' / 'b' / 'n' / 'f' / 'r' / 't' / 'v' / '\\'
OctalEscape ← OctalDigit OctalDigit OctalDigit
    / OctalDigit ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid octal escape")
}
HexEscape ← 'x' HexDigit HexDigit
    / 'x' ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid hexadecimal escape")
}
LongUnicodeEscape ← 
    'U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit {
        return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
    }
    / 'U' ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid Unicode escape")
}
ShortUnicodeEscape ← 
    'u' HexDigit HexDigit HexDigit HexDigit {
        return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
    }
    / 'u' ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid Unicode escape")
}

OctalDigit ← [0-7]
DecimalDigit ← [0-9]
HexDigit ← [0-9a-f]i

CharClassMatcher ← '[' ( ClassCharRange / ClassChar / "\\" UnicodeClassEscape )* ']' 'i'? {
    pos := c.astPos()
    cc := ast.NewCharClassMatcher(pos, string(c.text))
    return cc, nil
} / '[' ( !( EOL ) SourceChar )* ( EOL / EOF ) {
    return ast.NewCharClassMatcher(c.astPos(), "[]"), errors.New("character class not terminated")
}

ClassCharRange ← ClassChar '-' ClassChar
ClassChar ← !( "]" / "\\" / EOL ) SourceChar / "\\" CharClassEscape
CharClassEscape ← ( ']' / CommonEscapeSequence )
    / !'p' ( SourceChar / EOL / EOF ) {
    return nil, errors.New("invalid escape character")
}

UnicodeClassEscape ← 'p' ( 
      SingleCharUnicodeClass
    / !'{' ( SourceChar / EOL / EOF ) { return nil, errors.New("invalid Unicode class escape") }
    / '{' ident:IdentifierName '}' {
        if !unicodeClasses[ident.(*ast.Identifier).Val] {
            return nil, errors.New("invalid Unicode class escape")
        }
        return nil, nil
    }
    / '{' IdentifierName ( ']' / EOL / EOF ) {
        return nil, errors.New("Unicode class not terminated")
    }
    )
SingleCharUnicodeClass ← [LMNCPZS]

AnyMatcher ← "." {
    any := ast.NewAnyMatcher(c.astPos(), ".")
    return any, nil
}

ThrowExpr ← '%' '{' label:IdentifierName '}' {
    t := ast.NewThrowExpr(c.astPos())
    t.Label = label.(*ast.Identifier).Val
    return t, nil
} / '%' '{' IdentifierName EOF {
    return nil, errors.New("throw expression not terminated")
}

CodeBlock ← '{' Code '}' {
    pos := c.astPos()
    cb := ast.NewCodeBlock(pos, string(c.text))
    return cb, nil
} / '{' Code EOF {
    return nil, errors.New("code block not terminated")
}

Code ← ( ( ![{}] SourceChar )+ / '{' Code '}' )*

__ ← ( Whitespace / EOL / Comment )*
_ ← ( Whitespace / MultiLineCommentNoLineTerminator )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOS ← __ ';' / _ SingleLineComment? EOL / __ EOF

EOF ← !.

