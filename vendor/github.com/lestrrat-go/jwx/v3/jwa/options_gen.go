// Code generated by tools/cmd/genoptions/main.go. DO NOT EDIT.

package jwa

import (
	"sync"

	"github.com/lestrrat-go/option/v2"
)

type Option = option.Interface

// NewAlgorithmOption represents an option that can be passed to any of the constructor functions
type NewAlgorithmOption interface {
	Option
	newSignatureAlgorithmOption()
	newKeyEncryptionAlgorithmOption()
	newSignatureKeyEncryptionAlgorithmOption()
}

var newAlgorithmOptionListPool = option.NewSetPool[NewAlgorithmOption](
	&sync.Pool{New: func() any { return option.NewSet[NewAlgorithmOption]() }},
)

func NewAlgorithmOptionListPool() *option.SetPool[NewAlgorithmOption] {
	return newAlgorithmOptionListPool
}

type newAlgorithmOption struct {
	Option
}

func (*newAlgorithmOption) newSignatureAlgorithmOption() {}

func (*newAlgorithmOption) newKeyEncryptionAlgorithmOption() {}

func (*newAlgorithmOption) newSignatureKeyEncryptionAlgorithmOption() {}

// NewKeyEncryptionAlgorithmOption represents an option that can be passed to the NewKeyEncryptionAlgorithm
type NewKeyEncryptionAlgorithmOption interface {
	Option
	newKeyEncryptionAlgorithmOption()
}

var newKeyEncryptionAlgorithmOptionListPool = option.NewSetPool[NewKeyEncryptionAlgorithmOption](
	&sync.Pool{New: func() any { return option.NewSet[NewKeyEncryptionAlgorithmOption]() }},
)

func NewKeyEncryptionAlgorithmOptionListPool() *option.SetPool[NewKeyEncryptionAlgorithmOption] {
	return newKeyEncryptionAlgorithmOptionListPool
}

type newKeyEncryptionAlgorithmOption struct {
	Option
}

func (*newKeyEncryptionAlgorithmOption) newKeyEncryptionAlgorithmOption() {}

// NewSignatureAlgorithmOption represents an option that can be passed to the NewSignatureAlgorithm
type NewSignatureAlgorithmOption interface {
	Option
	newSignatureAlgorithmOption()
}

var newSignatureAlgorithmOptionListPool = option.NewSetPool[NewSignatureAlgorithmOption](
	&sync.Pool{New: func() any { return option.NewSet[NewSignatureAlgorithmOption]() }},
)

func NewSignatureAlgorithmOptionListPool() *option.SetPool[NewSignatureAlgorithmOption] {
	return newSignatureAlgorithmOptionListPool
}

type newSignatureAlgorithmOption struct {
	Option
}

func (*newSignatureAlgorithmOption) newSignatureAlgorithmOption() {}

// NewSignatureKeyEncryptionAlgorithmOption represents an option that can be passed to both
// NewSignatureAlgorithm and NewKeyEncryptionAlgorithm
type NewSignatureKeyEncryptionAlgorithmOption interface {
	Option
	newSignatureAlgorithmOption()
	newKeyEncryptionAlgorithmOption()
}

var newSignatureKeyEncryptionAlgorithmOptionListPool = option.NewSetPool[NewSignatureKeyEncryptionAlgorithmOption](
	&sync.Pool{New: func() any { return option.NewSet[NewSignatureKeyEncryptionAlgorithmOption]() }},
)

func NewSignatureKeyEncryptionAlgorithmOptionListPool() *option.SetPool[NewSignatureKeyEncryptionAlgorithmOption] {
	return newSignatureKeyEncryptionAlgorithmOptionListPool
}

type newSignatureKeyEncryptionAlgorithmOption struct {
	Option
}

func (*newSignatureKeyEncryptionAlgorithmOption) newSignatureAlgorithmOption() {}

func (*newSignatureKeyEncryptionAlgorithmOption) newKeyEncryptionAlgorithmOption() {}

type identDeprecated struct{}
type identIsSymmetric struct{}

func (identDeprecated) String() string {
	return "WithDeprecated"
}

func (identIsSymmetric) String() string {
	return "WithIsSymmetric"
}

var trueWithDeprecated = &newAlgorithmOption{option.New(identDeprecated{}, true)}
var falseWithDeprecated = &newAlgorithmOption{option.New(identDeprecated{}, false)}

// WithDeprecated specifies that the algorithm is deprecated. In order to
// un-deprecate an algorithm, you will have to create a new algorithm
// with the same values but with the Deprecated option set to false, and
// then call RegisterXXXXAlgorithm with the new algorithm.
func WithDeprecated(v bool) NewAlgorithmOption {
	if v {
		return trueWithDeprecated
	}
	return falseWithDeprecated
}

var trueWithIsSymmetric = &newSignatureKeyEncryptionAlgorithmOption{option.New(identIsSymmetric{}, true)}
var falseWithIsSymmetric = &newSignatureKeyEncryptionAlgorithmOption{option.New(identIsSymmetric{}, false)}

// IsSymmetric specifies that the algorithm is symmetric
func WithIsSymmetric(v bool) NewSignatureKeyEncryptionAlgorithmOption {
	if v {
		return trueWithIsSymmetric
	}
	return falseWithIsSymmetric
}
