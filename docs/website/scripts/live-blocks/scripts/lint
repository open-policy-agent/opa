#!/usr/bin/env node

const path = require('path')
const {execSync} = require('child_process')
const {readdirSync} = require('fs')
const {realpathSync} = require('fs')

const chalk = require('chalk')
const padStart = require('lodash/padStart')
const {CLIEngine: Linter} = require('eslint')

const {error: report, log: println} = console

const nodeScriptRe = /node script text executable/
const workingDirectory = process.cwd()

function getFilenames(linter, argv) {
  if (argv[0] === '--staged') {
    return execSync('git diff --diff-filter=d --staged --name-only')
      .toString('utf8')
      .split(/\r\n?|\n/)
      .filter((pathname) => isPathnameLintable(linter, pathname))
  }

  if (argv.length > 0) {
    return argv
      .map((pathname) => path.resolve(pathname))
      .filter((pathname) => isPathnameLintable(linter, pathname))
  }

  return findLintableFiles(linter, workingDirectory)
}

function findLintableFiles(linter, pathname, files = []) {
  const dirents = readdirSync(pathname, {withFileTypes: true})

  for (let i = 0, ni = dirents.length; i < ni; ++i) {
    const dirent = dirents[i]
    const name = dirent.name
    const filename = path.join(pathname, name)

    if (dirent.isDirectory()) {
      findLintableFiles(linter, path.join(pathname, name), files)
    } else if (isPathnameLintable(linter, filename)) {
      files.push(path.join(pathname, name))
    }
  }

  return files
}

function isPathnameLintable(linter, pathname) {
  if (linter.isPathIgnored(pathname)) {
    return false
  }

  if (/\.js$/.test(pathname)) {
    return true
  }

  const fileClassification = execSync(`file '${pathname}'`).toString('utf8')
  if (nodeScriptRe.test(fileClassification)) {
    return true
  }

  return false
}

function processLintAnalysis(analysis) {
  const fixable = new Set()

  let nIssues = 0

  analysis.results.forEach((result) => {
    const {
      errorCount,
      filePath,
      fixableErrorCount,
      fixableWarningCount,
      messages,
      source,
      warningCount
    } = result

    if ((errorCount + warningCount) === 0) {
      return
    }

    if ((fixableErrorCount + fixableWarningCount) > 0) {
      fixable.add(filePath)
    }

    const lines = source.split(/\r\n?|\n/)

    nIssues += messages.length

    messages.forEach((item) => {
      const line = item.line

      if (line === 0) {
        println(chalk.red('Files shouldn’t have a line 0...'))
        println(chalk.gray(item.message))
      } else {
        const relativePath = path.relative(workingDirectory, filePath)
        const location = `${relativePath}:${line}`
        const ruleId = item.ruleId
        const severity = item.severity ? chalk.red : chalk.yellow
        const issuePrefix =
          severity(`${item.severity === 2 ? 'E' : 'W'}:`)

        if (ruleId) {
          const caret = severity(padStart('↑', item.column))
          const tracePrefix = chalk.dim(' :')

          const index = line - 1
          const nBefore = 2
          const nAfter = 2
          const before = Math.max(index - nBefore, 0)
          const after = Math.min(index + nAfter + 1, lines.length - 1)

          println(issuePrefix, severity(location, ruleId))

          lines.slice(before, index).forEach((x) => {
            println(tracePrefix, chalk.dim(x))
          })

          println(severity(' :', item.message))
          println(severity(' :'), lines[index])
          println(severity(' :'), caret)

          lines.slice(index + 1, after).forEach((x) => {
            println(tracePrefix, chalk.dim(x))
          })
        } else {
          println(issuePrefix, severity(item.message))
        }
      }

      println()
    })
  })

  return {nIssues, fixable: Array.from(fixable)}
}

function lint(linter, ...argv) {
  const filenames = getFilenames(linter, argv)
  const count = filenames.length

  if (count > 0) {
    let linting = `Linting ${count} ${count === 1 ? 'file' : 'files'}...`

    if (argv.length > 0 && argv[0] !== '--staged') {
      linting = `Linting ${filenames.join(', ')} ...`
    }

    report(linting)

    const analysis = linter.executeOnFiles(filenames)
    const {nIssues, fixable} = processLintAnalysis(analysis)

    const issues = `${nIssues} ${nIssues === 1 ? 'issue' : 'issues'} found.`

    if (nIssues > 0) {
      report(chalk.bold.red(issues))
    } else {
      report(chalk.dim('Sm:)e! No issues found.'))
    }

    if (fixable.length) {
      const names = fixable.map((x) => path.relative(workingDirectory, x))
      const fix = `npx eslint --fix ${names.join(' ')}`

      report(chalk.bold.cyan('Some issues can be fixed. Try:'))
      report(chalk.cyan(`${fix}`))
    }

    return {files: count, issues: nIssues}
  }

  return {files: 0, issues: 0}
}

if (realpathSync(process.argv[1]) === __filename) {
  // Executed as script.
  try {
    const {issues} = lint(new Linter(), ...process.argv.slice(2))
    if (issues > 0) {
      process.exit(issues)
    }
  } catch (error) {
    // Catches configuration issues and missing dependencies, for example.
    report(chalk.red(error.stack ? error.stack : error))
    process.exit(1)
  }
}

module.exports = {
  isPathnameLintable: (pathname) => isPathnameLintable(new Linter(), pathname),
  lint: (...pathnames) => lint(new Linter(), ...pathnames)
}
