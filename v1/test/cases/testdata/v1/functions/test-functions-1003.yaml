---
cases:
  - note: functions/void good
    query: data.ex.voidGood = x
    modules:
      - |
        package test.l1.l2

        p := true

        f(__local292__) := __local292__
      - |
        package test.omit_result

        f(__local304__) := __local304__

        p if {
        	data.test.omit_result.f(1)
        }
      - |
        package topdown_test_partial

        __result__ := _result if {
        	_result = "w do you do?"
        }
      - |
        package ex

        foo(__local210__) := y if {
        	split(__local210__, "i", y)
        }

        bar[x] := y if {
        	data.l[_].a = x
        	data.ex.foo(x, y)
        }

        chain0(__local211__) := y if {
        	data.ex.foo(__local211__, y)
        }

        chain1(__local212__) := b if {
        	data.ex.chain0(__local212__, b)
        }

        chain2 := d if {
        	data.ex.chain1("fooibar", d)
        }

        cross(__local213__) := [a, b] if {
        	split(__local213__, "i", y)
        	__local27__ = y[1]
        	data.ex.foo(__local27__, b)
        	__local28__ = y[2]
        	data.test.foo(__local28__, a)
        }

        falsy_func(__local214__) := false

        falsy_func_else(__local215__) if {
        	__local215__ = 1
        }

        else := false

        falsy_undefined if {
        	data.ex.falsy_func(1)
        }

        falsy_negation if {
        	not data.ex.falsy_func(1)
        }

        falsy_else_value := __local23__ if {
        	true
        	data.ex.falsy_func_else(2, __local23__)
        }

        falsy_else_undefined if {
        	data.ex.falsy_func_else(2)
        }

        falsy_else_negation if {
        	not data.ex.falsy_func_else(2)
        }

        arrays([__local217__, __local218__]) := [a, b] if {
        	data.ex.foo(__local217__, a)
        	data.ex.foo(__local218__, b)
        }

        arraysrule := y if {
        	data.ex.arrays(["hih", "foo"], y)
        }

        objects({"foo": __local219__, "bar": __local220__}) := z if {
        	data.ex.foo(__local219__, a)
        	data.test.foo(__local220__, b)
        	z = [a, b]
        }

        objectsrule := y if {
        	data.ex.objects({"bar": "hi ho", "foo": "hih"}, y)
        }

        refoutput := y if {
        	data.ex.foo("hih", z)
        	y = z[1]
        }

        void(__local221__) if {
        	__local221__ = "foo"
        }

        voidGood if {
        	not data.ex.void("bar", true)
        }

        voidBad if {
        	data.ex.void("bar", true)
        }

        multi(1, __local222__) := y if {
        	y = __local222__
        }

        multi(2, __local223__) := y if {
        	__local24__ = 2 * __local223__
        	a = __local24__
        	__local25__ = a + 1
        	y = __local25__
        }

        multi(3, __local224__) := y if {
        	__local26__ = __local224__ * 10
        	y = __local26__
        }

        multi("foo", __local225__) := y if {
        	y = "bar"
        }

        multi1 := y if {
        	data.ex.multi(1, 2, y)
        }

        multi2 := y if {
        	data.ex.multi(2, 2, y)
        }

        multi3 := y if {
        	data.ex.multi(3, 2, y)
        }

        multi4 := y if {
        	data.ex.multi("foo", 2, y)
        }

        always_true_fn(__local226__) := true

        always_true if {
        	data.ex.always_true_fn(1)
        }
      - |
        package test

        foo(__local264__) := y if {
        	trim(__local264__, "h o", y)
        }

        cross := y if {
        	data.ex.cross("hi, my name is foo", y)
        }

        multi("foo", __local265__) := y if {
        	y = __local265__
        }

        multi("bar", __local266__) := y if {
        	y = "baz"
        }

        multi_cross_pkg := [y, z] if {
        	data.test.multi("foo", "bar", y)
        	data.ex.multi(2, 1, z)
        }
      - |
        package test

        samepkg := y if {
        	data.test.foo("how do you do?", y)
        }
      - |
        package test.l1.l3

        g(__local279__) := __local279__
    data: {}
    want_result:
      - x: true
