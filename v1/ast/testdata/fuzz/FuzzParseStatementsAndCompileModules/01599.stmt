go test fuzz v1
string("package ex\n\n\t\tfoo(x) = y {\n\t\t\tsplit(x, \"i\", y)\n\t\t}\n\n\t\tbar[x] = y {\n\t\t\tdata.l[_].a = x\n\t\t\tfoo(x, y)\n\t\t}\n\n\t\tchain0(x) = y {\n\t\t\tfoo(x, y)\n\t\t}\n\n\t\tchain1(a) = b {\n\t\t\tchain0(a, b)\n\t\t}\n\n\t\tchain2 = d {\n\t\t\tchain1(\"fooibar\", d)\n\t\t}\n\n\t\tcross(x) = [a, b] {\n\t\t\tsplit(x, \"i\", y)\n\t\t\tfoo(y[1], b)\n\t\t\tdata.test.foo(y[2], a)\n\t\t}\n\n\t\tfalsy_func(x) = false\n\n\t\tfalsy_func_else(x) = true { x = 1 } else = false { true }\n\n\t\tfalsy_undefined {\n\t\t\tfalsy_func(1)\n\t\t}\n\n\t\tfalsy_negation {\n\t\t\tnot falsy_func(1)\n\t\t}\n\n\t\tfalsy_else_value = falsy_func_else(2)\n\n\t\tfalsy_else_undefined {\n\t\t\tfalsy_func_else(2)\n\t\t}\n\n\t\tfalsy_else_negation {\n\t\t\tnot falsy_func_else(2)\n\t\t}\n\n\t\tarrays([x, y]) = [a, b] {\n\t\t\tfoo(x, a)\n\t\t\tfoo(y, b)\n\t\t}\n\n\t\tarraysrule = y {\n\t\t\tarrays([\"hih\", \"foo\"], y)\n\t\t}\n\n\t\tobjects({\"foo\": x, \"bar\": y}) = z {\n\t\t\tfoo(x, a)\n\t\t\tdata.test.foo(y, b)\n\t\t\tz = [a, b]\n\t\t}\n\n\t\tobjectsrule = y {\n\t\t\tobjects({\"foo\": \"hih\", \"bar\": \"hi ho\"}, y)\n\t\t}\n\n\t\trefoutput = y {\n\t\t\tfoo(\"hih\", z)\n\t\t\ty = z[1]\n\t\t}\n\n\t\tvoid(x) {\n\t\t\tx = \"foo\"\n\t\t}\n\n\t\tvoidGood {\n\t\t\tnot void(\"bar\", true)\n\t\t}\n\n\t\tvoidBad {\n\t\t\tvoid(\"bar\", true)\n\t\t}\n\n\t\tmulti(1, x) = y {\n\t\t\ty = x\n\t\t}\n\n\t\tmulti(2, x) = y {\n\t\t\ta = 2*x\n\t\t\ty = a+1\n\t\t}\n\n\t\tmulti(3, x) = y {\n\t\t\ty = x*10\n\t\t}\n\n\t\tmulti(\"foo\", x) = y {\n\t\t\ty = \"bar\"\n\t\t}\n\n\t\tmulti1 = y {\n\t\t\tmulti(1, 2, y)\n\t\t}\n\n\t\tmulti2 = y {\n\t\t\tmulti(2, 2, y)\n\t\t}\n\n\t\tmulti3 = y {\n\t\t\tmulti(3, 2, y)\n\t\t}\n\n\t\tmulti4 = y {\n\t\t\tmulti(\"foo\", 2, y)\n\t\t}\n\n\t\talways_true_fn(x)\n\n\t\talways_true {\n\t\t\talways_true_fn(1)\n\t\t}\n\t\t")
