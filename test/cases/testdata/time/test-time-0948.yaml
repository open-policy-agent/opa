cases:
- note: time/parse_nanos
  modules:
  - |
    package generated
  
    p[case_id] = ns {
      case := input.cases[case_id]
      time.parse_ns(case.layout, case.value, ns)
    }
  query: data.generated.p = x
  input: { cases: {
    1: { layout: "2006-01-02T15:04:05Z07:00", value: "2017-06-02T19:00:00-07:00" },           # RFC3339
    2: { layout: "2006-01-02T15:04:05Z07:00", value: "1677-09-21T00:12:43.145224192-00:00" }, # Earliest valid time
    3: { layout: "2006-01-02T15:04:05Z07:00", value: "2262-04-11T23:47:16.854775807-00:00" }, # Latest valid time
    4: { layout: "01/02 03:04:05PM '06 -0700", value: "06/02 07:00:00PM '17 -0700" },         # Layout
    5: { layout: "02 Jan 06 15:04 -0700", value: "02 Jun 17 19:00 -0700" },                   # RFC822Z
  }}
  want_result:
  - x: {
      1: 1496455200000000000,
      2: -9223372036854775808,
      3: 9223372036854775807,
      4: 1496455200000000000,
      5: 1496455200000000000
    }
- note: time/parse_nanos_too_small
  modules:
    - |
      package generated
      
      p = ns {
        time.parse_ns("2006-01-02T15:04:05Z07:00", "1677-09-21T00:12:43.145224191-00:00", ns)
      }
  query: data.generated.p = x
  strict_error: true
  want_error_code: eval_builtin_error
  want_error: 'time outside of valid range'
- note: time/parse_nanos_too_large
  modules:
    - |
      package generated
      
      p = ns {
        time.parse_ns("2006-01-02T15:04:05Z07:00", "2262-04-11T23:47:16.854775808-00:00", ns)
      }
  query: data.generated.p = x
  strict_error: true
  want_error_code: eval_builtin_error
  want_error: 'time outside of valid range'
