cases:
- modules:
  - |
    package test

    a.b.c.p { true }
  note: 'refheads/complete: direct query'
  query: data.test.a.b.c.p = x
  want_result:
  - x: true
- modules:
  - |
    package test

    a.b.c.p { true }
  note: 'refheads/complete: full package extent'
  query: data.test = x
  want_result:
  - x:
      a:
        b:
          c:
            p: true
- modules:
  - |
    package test

    a.b.c.p = 1
    q = 0
    a.b.d = 3

    p {
      q == 0
      a.b.c.p == 1
      a.b.d == 3
    }
  note: refheads/complete+mixed
  query: data.test.p = x
  want_result:
  - x: true
- modules:
  - |
    package test

    a.b[x] = y { x := "c"; y := "d" }
  note: refheads/single-value rule
  query: data.test.a = x
  want_result:
  - x:
      b:
        c: d
- modules:
  - |
    package test
    import future.keywords

    a.b contains x if some x in [1,2,3]
  note: refheads/multi-value
  query: data.test.a = x
  want_result:
  - x:
      b: [1, 2, 3]
# NOTE(sr): This isn't supported yet
# - modules:
#   - |
#     package test
#     import future.keywords

#     a.b[c] contains x if { c := "c"; some x in [1,2,3] }
#   note: refheads/multi-value with var in ref
#   query: data.test.a = x
#   want_result:
#   - x:
#       b:
#         c: [1, 2, 3]
- modules:
  - |
    package test
    import future.keywords

    a.b[x] = i if some i, x in [1, 2, 3]
  note: 'refheads/single-value: previously partial object'
  query: data.test.a = x
  want_result:
  - x:
      b: {"1": 0, "2": 1, "3": 2}
- modules:
  - |
    package test
    import future.keywords

    a.b.c.d contains 1 if true
  - |
    package test.a
    import future.keywords

    b.c.d contains 2 if true
  note: 'refheads/multi-value: same rule'
  query: data.test.a = x
  want_result:
  - x:
      b:
        c:
          d: [1, 2]
- modules:
  - |
    package test

    default a.b.c := "d"
  note: refheads/single-value default rule
  query: data.test.a = x
  want_result:
  - x:
      b:
        c: d
