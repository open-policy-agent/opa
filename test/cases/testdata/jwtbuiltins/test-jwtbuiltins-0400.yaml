cases:
- data:
    a:
    - 1
    - 2
    - 3
    - 4
    b:
      v1: hello
      v2: goodbye
    c:
    - x:
      - true
      - false
      - foo
      "y":
      - null
      - 3.14159
      z:
        p: true
        q: false
    d:
      e:
      - bar
      - baz
    f:
    - xs:
      - 1
      ys:
      - 2
    - xs:
      - 2
      ys:
      - 3
    g:
      a:
      - 1
      - 0
      - 0
      - 0
      b:
      - 0
      - 2
      - 0
      - 0
      c:
      - 0
      - 0
      - 0
      - 4
    h:
    - - 1
      - 2
      - 3
    - - 2
      - 3
      - 4
    l:
    - a: bob
      b: -1
      c:
      - 1
      - 2
      - 3
      - 4
    - a: alice
      b: 1
      c:
      - 2
      - 3
      - 4
      - 5
      d: null
    m: []
    numbers:
    - "1"
    - "2"
    - "3"
    - "4"
    strings:
      bar: 2
      baz: 3
      foo: 1
    three: 3
  modules:
  - |
    package generated

    p = [x, y, z] {
      io.jwt.decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiAiMCIsImlzcyI6ICJub3Qgb3BhIiwgImlzcyI6ICJhbHNvIG5vdCBvcGEiLCAiaXNzIjogIm9wYSJ9.XmVoLoHI3pxMtMO_WRONMSJzGUDP9pDjy8Jp0_tdRXY", [x, y, z])
    }
  # The test below checks that payloads with duplicate keys
  # in their encoding produce a token object that binds the key
  # to the last occurring value, as per RFC 7519 Section 4.
  # It tests a payload encoding that has 3 duplicates of the
  # "iss" key, with the values "not opa", "also not opa" and
  # "opa", in that order.
  # Go's json.Unmarshal exhibits this behavior, but it is not
  # documented, so this test is meant to catch that behavior
  # if it changes.
  note: jwtbuiltins/duplicate-keys
  query: data.generated.p = x
  want_result:
  - x:
    - alg: HS256
      typ: JWT
    - iss: opa
      sub: "0"
    - 5e65682e81c8de9c4cb4c3bf59138d3122731940cff690e3cbc269d3fb5d4576
