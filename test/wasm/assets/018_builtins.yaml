cases:
  - note: abs built-in
    query: abs(-1,x)
    want_result: [{'x': 1}]
  - note: round built-in
    query: round(1.4,x)
    want_result: [{'x': 1}]
  - note: plus built-in
    query: plus(1,1,x)
    want_result: [{'x': 2}]
  - note: minus built-in
    query: minus(1,1,x)
    want_result: [{'x': 0}]
  - note: multiply built-in
    query: mul(2,3,x)
    want_result: [{'x': 6}]
  - note: divide built-in
    query: div(2,3,x)
    want_result: [{'x': 0.6666666666666666}]
  - note: remainder built-in
    query: rem(4,3,x)
    want_result: [{'x': 1}]
  - note: array concat built-in
    query: array.concat([0],[1],x)
    want_result: [{'x': [0,1]}]
  - note: array slice built-in
    query: array.slice([0,1,2,4],1,3,x)
    want_result: [{'x': [1,2]}]
  - note: set diff built-in
    query: set_diff({0,1},{0},x)
    want_result: [{'x': [1]}]
  - note: and built-in
    query: and({0,1},{0},x)
    want_result: [{'x': [0]}]
  - note: or built-in
    query: or({0,1},{0},x)
    want_result: [{'x': [1,0]}]
  - note: intersection built-in
    query: intersection({{0,1},{0}},x)
    want_result: [{'x': [0]}]
  - note: union built-in
    query: union({{0,1},{0}},x)
    want_result: [{'x': [1,0]}]
  - note: is_number built-in
    query: is_number(1,x)
    want_result: [{'x': true}]
  - note: is_string built-in
    query: is_string("a",x)
    want_result: [{'x': true}]
  - note: is_boolean built-in
    query: is_boolean(true,x)
    want_result: [{'x': true}]
  - note: is_array built-in
    query: is_array([],x)
    want_result: [{'x': true}]
  - note: is_set built-in
    query: is_set({"a"},x)
    want_result: [{'x': true}]
  - note: is_object built-in
    query: is_object({},x)
    want_result: [{'x': true}]
  - note: is_null built-in
    query: is_null(null,x)
    want_result: [{'x': true}]
  - note: type_name built-in
    query: type_name(1,x)
    want_result: [{'x': "number"}]
  - note: bits.or built-in
    query: bits.or(1,2,x)
    want_result: [{'x': 3}]
  - note: bits.and built-in
    query: bits.and(5,3,x)
    want_result: [{'x': 1}]
  - note: bits.negate built-in
    query: bits.negate(1,x)
    want_result: [{'x': -2}]
  - note: bits.xor built-in
    query: bits.xor(1,1,x)
    want_result: [{'x': 0}]
  - note: bits.lsh built-in
    query: bits.lsh(1,1,x)
    want_result: [{'x': 2}]
  - note: bits.rsh built-in
    query: bits.rsh(2,1,x)
    want_result: [{'x': 1}]
  - note: count built-in
    query: count([1,2,3],x)
    want_result: [{'x': 3}]
  - note: sum built-in
    query: sum([1,2,3],x)
    want_result: [{'x': 6}]
  - note: product built-in
    query: product([1,2,3],x)
    want_result: [{'x': 6}]
  - note: max built-in
    query: max([1,2,3],x)
    want_result: [{'x': 3}]
  - note: min built-in
    query: min([3,2,1],x)
    want_result: [{'x': 1}]
  - note: sort built-in
    query: sort(["1","3","2"],x)
    want_result: [{'x': ["1","2","3"]}]
  - note: all built-in
    query: all([true,true],x)
    want_result: [{'x': true}]
  - note: any built-in
    query: any([false,true],x)
    want_result: [{'x': true}]
  - note: concat built-in
    query: concat(",",["a","b"],x)
    want_result: [{'x': "a,b"}]
  - note: contains built-in
    query: contains("abc","b",x)
    want_result: [{'x': true}]
  - note: endswith built-in
    query: endswith("abc","c",x)
    want_result: [{'x': true}]
  - note: format_int built-in
    query: format_int(10,16,x)
    want_result: [{'x': "a"}]
  - note: indexof built-in
    query: indexof("abc","b",x)
    want_result: [{'x': 1}]
  - note: lower built-in
    query: lower("A",x)
    want_result: [{'x': "a"}]
  - note: replace built-in
    query: replace("abc","b","d",x)
    want_result: [{'x': "adc"}]
  - note: replace_n built-in
    query: strings.replace_n({"b":"d"},"abc",x)
    want_result: [{'x': "adc"}]
  - note: split built-in
    query: split("a,b",",",x)
    want_result: [{'x': ["a","b"]}]
  - note: startswith built-in
    query: startswith("abc","a",x)
    want_result: [{'x': true}]
  - note: substring built-in
    query: substring("abcd",1,2,x)
    want_result: [{'x': "bc"}]
  - note: trim built-in
    query: trim("abc","ac",x)
    want_result: [{'x': "b"}]
  - note: trim_left built-in
    query: trim_left("abc","ba",x)
    want_result: [{'x': "c"}]
  - note: trim_prefix built-in
    query: trim_prefix("abc","ab",x)
    want_result: [{'x': "c"}]
  - note: trim_right built-in
    query: trim_right("abc","cb",x)
    want_result: [{'x': "a"}]
  - note: trim_suffix built-in
    query: trim_suffix("abc","bc",x)
    want_result: [{'x': "a"}]
  - note: trim_space built-in
    query: trim_space(" abc ",x)
    want_result: [{'x': "abc"}]
  - note: upper built-in
    query: upper("a",x)
    want_result: [{'x': "A"}]
  - note: numbers.range built-in
    query: numbers.range(10, 12, x)
    want_result: [{'x': [10, 11, 12]}]
  - note: custom built-in
    query: x = custom_builtin_test(100)
    want_result: [{'x': 101}]
  - note: impure built-in
    query: x = custom_builtin_test_impure()
    want_result: [{'x': "foo"}]
  - note: nested
    query: arr = ["foo","bar","baz","qux"]; x = arr[1+1+1]
    want_result: [{'arr': ['foo', 'bar', 'baz', 'qux'], 'x': "qux"}]