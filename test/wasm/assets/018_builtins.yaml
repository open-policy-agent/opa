cases:
  - note: abs built-in
    query: abs(-1,x)
    want_result: [{'x': 1}]
  - note: round built-in
    query: round(1.4,x)
    want_result: [{'x': 1}]
  - note: plus built-in
    query: plus(1,1,x)
    want_result: [{'x': 2}]
  - note: minus built-in
    query: minus(1,1,x)
    want_result: [{'x': 0}]
  - note: multiply built-in
    query: mul(2,3,x)
    want_result: [{'x': 6}]
  - note: divide built-in
    query: div(2,3,x)
    want_result: [{'x': 0.6666666666666666}]
  - note: remainder built-in
    query: rem(4,3,x)
    want_result: [{'x': 1}]
  - note: array concat built-in
    query: array.concat([0],[1],x)
    want_result: [{'x': [0,1]}]
  - note: array slice built-in
    query: array.slice([0,1,2,4],1,3,x)
    want_result: [{'x': [1,2]}]
  - note: set diff built-in
    query: set_diff({0,1},{0},x)
    want_result: [{'x': [1]}]
  - note: and built-in
    query: and({0,1},{0},x)
    want_result: [{'x': [0]}]
  - note: or built-in
    query: or({0,1},{0},x)
    want_result: [{'x': [1,0]}]
  - note: intersection built-in
    query: intersection({{0,1},{0}},x)
    want_result: [{'x': [0]}]
  - note: union built-in
    query: union({{0,1},{0}},x)
    want_result: [{'x': [1,0]}]
  - note: is_number built-in
    query: is_number(1,x)
    want_result: [{'x': true}]
  - note: is_string built-in
    query: is_string("a",x)
    want_result: [{'x': true}]
  - note: is_boolean built-in
    query: is_boolean(true,x)
    want_result: [{'x': true}]
  - note: is_array built-in
    query: is_array([],x)
    want_result: [{'x': true}]
  - note: is_set built-in
    query: is_set({"a"},x)
    want_result: [{'x': true}]
  - note: is_object built-in
    query: is_object({},x)
    want_result: [{'x': true}]
  - note: is_null built-in
    query: is_null(null,x)
    want_result: [{'x': true}]
  - note: type_name built-in
    query: type_name(1,x)
    want_result: [{'x': "number"}]
  - note: bits.or built-in
    query: bits.or(1,2,x)
    want_result: [{'x': 3}]
  - note: bits.and built-in
    query: bits.and(5,3,x)
    want_result: [{'x': 1}]
  - note: bits.negate built-in
    query: bits.negate(1,x)
    want_result: [{'x': -2}]
  - note: bits.xor built-in
    query: bits.xor(1,1,x)
    want_result: [{'x': 0}]
  - note: bits.lsh built-in
    query: bits.lsh(1,1,x)
    want_result: [{'x': 2}]
  - note: bits.rsh built-in
    query: bits.rsh(2,1,x)
    want_result: [{'x': 1}]
  - note: custom built-in
    query: x = custom_builtin_test(100)
    want_result: [{'x': 101}]
  - note: impure built-in
    query: x = custom_builtin_test_impure()
    want_result: [{'x': "foo"}]
  - note: nested
    query: arr = ["foo","bar","baz","qux"]; x = arr[1+1+1]
    want_result: [{'arr': ['foo', 'bar', 'baz', 'qux'], 'x': "qux"}]