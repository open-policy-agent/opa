cases:
  - note: identity
    disable_partial: true
    query: data.x.f(1, 1)
    modules:
      - |
        package x
        f(x) = x
    return_code: 1
  - note: identity (negative)
    disable_partial: true
    query: data.x.f(1, 2)
    modules:
      - |
        package x
        f(x) = x
    return_code: 0
  - note: identity implicit
    disable_partial: true
    query: data.x.f(1) = 1
    modules:
      - |
        package x
        f(x) = x
    return_code: 1
  - note: identity implicit (negative)
    disable_partial: true
    query: data.x.f(1) = 2
    modules:
      - |
        package x
        f(x) = x
    return_code: 0
  - note: composite arg
    disable_partial: true
    query: data.x.f([1]) = 1
    modules:
      - |
        package x
        f(x) = x[0]
    return_code: 1
  - note: composite param
    disable_partial: true
    query: data.x.f([1]) = 1
    modules:
      - |
        package x
        f([x]) = x
    return_code: 1
  - note: multiple params
    disable_partial: true
    query: data.x.f(1, 2) = [2, 1]
    modules:
      - |
        package x
        f(x, y) = [y, x]
    return_code: 1
  - note: multiple params (negative)
    disable_partial: true
    query: data.x.f(1, 2) = [2, 1]
    modules:
      - |
        package x
        f(x, y) = [x, x]
    return_code: 0
  - note: disjunction
    disable_partial: true
    query: data.x.f(1) = 0
    modules:
      - |
        package x
        f(x) = 1 { x <= 0 }
        f(x) = 0 { x > 0 }
    return_code: 1
  - note: disjunction (negative)
    disable_partial: true
    query: data.x.f(1) = 2
    modules:
      - |
        package x
        f(x) = 1 { x <= 0 }
        f(x) = 0 { x > 0 }
    return_code: 0
  - note: negation
    disable_partial: true
    query: not data.x.f(-1)
    modules:
      - |
        package x
        f(x) = x { x >= 0 }
    return_code: 1
  - note: input
    disable_partial: true
    query: data.x.f(1) = 1
    modules:
      - |
        package x
        f(x) = g(x)
        g(x) = x { input.x = x }
    input: {"x": 1}
    return_code: 1
  - note: input (negative)
    disable_partial: true
    query: data.x.f(1) = 1
    modules:
      - |
        package x
        f(x) = g(x)
        g(x) = x { input.x = x }
    input: {"x": 2}
    return_code: 0
  - note: conflict error
    disable_partial: true
    query: data.x.f(1) = 1
    modules:
      - |
        package x
        f(x) = 1
        f(x) = 2
    want_error: "unreachable"  # TODO(tsandall): replace with conflict error.