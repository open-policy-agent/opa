cases:
  - note: iteration
    query: input.x[i] = 1
    input: {"x": [3,2,1]}
    return_code: 1
  - note: iteration (negative)
    query: input.x[i] = 1
    input: {"x": [3,2,0]}
    return_code: 0
  - note: iteration nested
    query: input.x[i] = 1; input.y[j] = "world"
    input: {"x": [3,2,1], "y": ["hello", "world"]}
    return_code: 1
  - note: iteration nested (negative)
    query: input.x[i] = 1; input.y[j] = "world"
    input: {"x": [3,2,0], "y": ["hello", "universe"]}
    return_code: 0
  - note: iteration chained
    query: input.x[i].y[j] = 1
    input: {"x": [{"y": []}, {"y": [0]}, {"y": [0, 1]}]}
    return_code: 1
  - note: iteration chained (negative)
    query: input.x[i].y[j] = 1
    input: {"x": [{"y": []}, {"y": [0]}, {"y": [0, 2]}]}
    return_code: 0
  - note: iteration ground
    query: input.x[i].y[i] = 2
    input: {
      "x": [
        {
          "y": [
            1,
            2,
          ]
        },
        {
          "y": [
            1,
            2,
          ]
        },
      ]
    }
    return_code: 1
  - note: iteration ground
    query: input.x[i].y[i] = 1
    input: {
      "x": [
        {
          "y": [
            2,
            1,
          ]
        },
        {
          "y": [
            1,
            2,
          ]
        },
      ]
    }
    return_code: 0
  - note: iteration composite
    query: a = {["t",1], ["u",2], ["v", 3]}; a[["v", v]]; v == 3
    return_code: 1
  - note: iteration composite (negative)
    query: a = {["t",1], ["u",2], ["v", 3]}; a[["u", u]]; u == 3
    return_code: 0
  - note: no scan required
    query: u = 2; a = {["t",1], ["u",2], ["v", 3]}; a[["u", u]]
    return_code: 1
  - note: no scan required (negative)
    query: v = 2; a = {["t",1], ["u",2], ["v", 3]}; a[["v", v]]
    return_code: 0